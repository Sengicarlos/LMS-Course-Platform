{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/sengicarlos/Desktop/S_Tier%20Coding/lms-course-platform/node_modules/.pnpm/better-auth%401.3.28_better-s_71bc4d03c84001ce265c8454e33d8f52/node_modules/better-auth/dist/shared/better-auth.BOULxa5h.mjs"],"sourcesContent":["import * as z from 'zod';\nimport { s as setSessionCookie, d as deleteSessionCookie } from './better-auth.CjNhg7P4.mjs';\nimport { APIError, toResponse } from 'better-call';\nimport { createAuthMiddleware, createAuthEndpoint } from '@better-auth/core/middleware';\nimport '@better-auth/utils/random';\nimport { BASE_ERROR_CODES } from '@better-auth/core/error';\nimport { SocialProviderListEnum } from '@better-auth/core/social-providers';\nimport { s as safeJSONParse } from './better-auth.BKEtEpt0.mjs';\nimport { g as getSessionFromCtx, e as sensitiveSessionMiddleware, s as sessionMiddleware, f as freshSessionMiddleware } from './better-auth.DP-TUMaw.mjs';\nimport { g as getDate } from './better-auth.CW6D9eSx.mjs';\nimport { g as generateId } from './better-auth.BUPPRXfK.mjs';\nimport '@better-auth/utils/hash';\nimport '@noble/ciphers/chacha.js';\nimport '@noble/ciphers/utils.js';\nimport '@better-auth/utils/base64';\nimport { jwtVerify } from 'jose';\nimport '@noble/hashes/scrypt.js';\nimport '@better-auth/utils/hex';\nimport '@noble/hashes/utils.js';\nimport { g as generateRandomString } from './better-auth.B4Qoxdgc.mjs';\nimport { logger, isDevelopment, shouldPublishLog } from '@better-auth/core/env';\nimport '@better-auth/utils/hmac';\nimport '@better-auth/utils/binary';\nimport '@better-auth/core/db';\nimport 'kysely';\nimport { createDefu } from 'defu';\nimport { signJWT, symmetricEncrypt, symmetricDecrypt } from '../crypto/index.mjs';\nimport { g as getOrigin, b as getHost, c as getProtocol } from './better-auth.NIVvsrVf.mjs';\nimport { JWTExpired } from 'jose/errors';\n\nfunction escapeRegExpChar(char) {\n  if (char === \"-\" || char === \"^\" || char === \"$\" || char === \"+\" || char === \".\" || char === \"(\" || char === \")\" || char === \"|\" || char === \"[\" || char === \"]\" || char === \"{\" || char === \"}\" || char === \"*\" || char === \"?\" || char === \"\\\\\") {\n    return `\\\\${char}`;\n  } else {\n    return char;\n  }\n}\nfunction escapeRegExpString(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    result += escapeRegExpChar(str[i]);\n  }\n  return result;\n}\nfunction transform(pattern, separator = true) {\n  if (Array.isArray(pattern)) {\n    let regExpPatterns = pattern.map((p) => `^${transform(p, separator)}$`);\n    return `(?:${regExpPatterns.join(\"|\")})`;\n  }\n  let separatorSplitter = \"\";\n  let separatorMatcher = \"\";\n  let wildcard = \".\";\n  if (separator === true) {\n    separatorSplitter = \"/\";\n    separatorMatcher = \"[/\\\\\\\\]\";\n    wildcard = \"[^/\\\\\\\\]\";\n  } else if (separator) {\n    separatorSplitter = separator;\n    separatorMatcher = escapeRegExpString(separatorSplitter);\n    if (separatorMatcher.length > 1) {\n      separatorMatcher = `(?:${separatorMatcher})`;\n      wildcard = `((?!${separatorMatcher}).)`;\n    } else {\n      wildcard = `[^${separatorMatcher}]`;\n    }\n  }\n  let requiredSeparator = separator ? `${separatorMatcher}+?` : \"\";\n  let optionalSeparator = separator ? `${separatorMatcher}*?` : \"\";\n  let segments = separator ? pattern.split(separatorSplitter) : [pattern];\n  let result = \"\";\n  for (let s = 0; s < segments.length; s++) {\n    let segment = segments[s];\n    let nextSegment = segments[s + 1];\n    let currentSeparator = \"\";\n    if (!segment && s > 0) {\n      continue;\n    }\n    if (separator) {\n      if (s === segments.length - 1) {\n        currentSeparator = optionalSeparator;\n      } else if (nextSegment !== \"**\") {\n        currentSeparator = requiredSeparator;\n      } else {\n        currentSeparator = \"\";\n      }\n    }\n    if (separator && segment === \"**\") {\n      if (currentSeparator) {\n        result += s === 0 ? \"\" : currentSeparator;\n        result += `(?:${wildcard}*?${currentSeparator})*?`;\n      }\n      continue;\n    }\n    for (let c = 0; c < segment.length; c++) {\n      let char = segment[c];\n      if (char === \"\\\\\") {\n        if (c < segment.length - 1) {\n          result += escapeRegExpChar(segment[c + 1]);\n          c++;\n        }\n      } else if (char === \"?\") {\n        result += wildcard;\n      } else if (char === \"*\") {\n        result += `${wildcard}*?`;\n      } else {\n        result += escapeRegExpChar(char);\n      }\n    }\n    result += currentSeparator;\n  }\n  return result;\n}\nfunction isMatch(regexp, sample) {\n  if (typeof sample !== \"string\") {\n    throw new TypeError(`Sample must be a string, but ${typeof sample} given`);\n  }\n  return regexp.test(sample);\n}\nfunction wildcardMatch(pattern, options) {\n  if (typeof pattern !== \"string\" && !Array.isArray(pattern)) {\n    throw new TypeError(\n      `The first argument must be a single pattern string or an array of patterns, but ${typeof pattern} given`\n    );\n  }\n  if (typeof options === \"string\" || typeof options === \"boolean\") {\n    options = { separator: options };\n  }\n  if (arguments.length === 2 && !(typeof options === \"undefined\" || typeof options === \"object\" && options !== null && !Array.isArray(options))) {\n    throw new TypeError(\n      `The second argument must be an options object or a string/boolean separator, but ${typeof options} given`\n    );\n  }\n  options = options || {};\n  if (options.separator === \"\\\\\") {\n    throw new Error(\n      \"\\\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead\"\n    );\n  }\n  let regexpPattern = transform(pattern, options.separator);\n  let regexp = new RegExp(`^${regexpPattern}$`, options.flags);\n  let fn = isMatch.bind(null, regexp);\n  fn.options = options;\n  fn.pattern = pattern;\n  fn.regexp = regexp;\n  return fn;\n}\n\nconst originCheckMiddleware = createAuthMiddleware(async (ctx) => {\n  if (ctx.request?.method !== \"POST\" || !ctx.request) {\n    return;\n  }\n  const { body, query, context } = ctx;\n  const originHeader = ctx.headers?.get(\"origin\") || ctx.headers?.get(\"referer\") || \"\";\n  const callbackURL = body?.callbackURL || query?.callbackURL;\n  const redirectURL = body?.redirectTo;\n  const errorCallbackURL = body?.errorCallbackURL;\n  const newUserCallbackURL = body?.newUserCallbackURL;\n  const trustedOrigins = Array.isArray(context.options.trustedOrigins) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const usesCookies = ctx.headers?.has(\"cookie\");\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      if (pattern.includes(\"://\")) {\n        return wildcardMatch(pattern)(getOrigin(url) || url);\n      }\n      return wildcardMatch(pattern)(getHost(url));\n    }\n    const protocol = getProtocol(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === getOrigin(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(url)\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  if (usesCookies && !ctx.context.options.advanced?.disableCSRFCheck) {\n    validateURL(originHeader, \"origin\");\n  }\n  callbackURL && validateURL(callbackURL, \"callbackURL\");\n  redirectURL && validateURL(redirectURL, \"redirectURL\");\n  errorCallbackURL && validateURL(errorCallbackURL, \"errorCallbackURL\");\n  newUserCallbackURL && validateURL(newUserCallbackURL, \"newUserCallbackURL\");\n});\nconst originCheck = (getValue) => createAuthMiddleware(async (ctx) => {\n  if (!ctx.request) {\n    return;\n  }\n  const { context } = ctx;\n  const callbackURL = getValue(ctx);\n  const trustedOrigins = Array.isArray(\n    context.options.trustedOrigins\n  ) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      if (pattern.includes(\"://\")) {\n        return wildcardMatch(pattern)(getOrigin(url) || url);\n      }\n      return wildcardMatch(pattern)(getHost(url));\n    }\n    const protocol = getProtocol(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === getOrigin(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(\n        url\n      )\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  const callbacks = Array.isArray(callbackURL) ? callbackURL : [callbackURL];\n  for (const url of callbacks) {\n    validateURL(url, \"callbackURL\");\n  }\n});\n\nasync function createEmailVerificationToken(secret, email, updateTo, expiresIn = 3600) {\n  const token = await signJWT(\n    {\n      email: email.toLowerCase(),\n      updateTo\n    },\n    secret,\n    expiresIn\n  );\n  return token;\n}\nasync function sendVerificationEmailFn(ctx, user) {\n  if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n    ctx.context.logger.error(\"Verification email isn't enabled.\");\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"Verification email isn't enabled\"\n    });\n  }\n  const token = await createEmailVerificationToken(\n    ctx.context.secret,\n    user.email,\n    void 0,\n    ctx.context.options.emailVerification?.expiresIn\n  );\n  const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n  await ctx.context.options.emailVerification.sendVerificationEmail(\n    {\n      user,\n      url,\n      token\n    },\n    ctx.request\n  );\n}\nconst sendVerificationEmail = createAuthEndpoint(\n  \"/send-verification-email\",\n  {\n    method: \"POST\",\n    body: z.object({\n      email: z.email().meta({\n        description: \"The email to send the verification email to\"\n      }),\n      callbackURL: z.string().meta({\n        description: \"The URL to use for email verification callback\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a verification email to the user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  email: {\n                    type: \"string\",\n                    description: \"The email to send the verification email to\",\n                    example: \"user@example.com\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\",\n                    example: \"https://example.com/callback\",\n                    nullable: true\n                  }\n                },\n                required: [\"email\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was sent successfully\",\n                      example: true\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            description: \"Bad Request\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Error message\",\n                      example: \"Verification email isn't enabled\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const { email } = ctx.body;\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      const user = await ctx.context.internalAdapter.findUserByEmail(email);\n      if (!user) {\n        return ctx.json({\n          status: true\n        });\n      }\n      await sendVerificationEmailFn(ctx, user.user);\n      return ctx.json({\n        status: true\n      });\n    }\n    if (session?.user.emailVerified) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to an unverified email\"\n      });\n    }\n    if (session?.user.email !== email) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to your own email\"\n      });\n    }\n    await sendVerificationEmailFn(ctx, session.user);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst verifyEmail = createAuthEndpoint(\n  \"/verify-email\",\n  {\n    method: \"GET\",\n    query: z.object({\n      token: z.string().meta({\n        description: \"The token to verify the email\"\n      }),\n      callbackURL: z.string().meta({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Verify the email of the user\",\n        parameters: [\n          {\n            name: \"token\",\n            in: \"query\",\n            description: \"The token to verify the email\",\n            required: true,\n            schema: {\n              type: \"string\"\n            }\n          },\n          {\n            name: \"callbackURL\",\n            in: \"query\",\n            description: \"The URL to redirect to after email verification\",\n            required: false,\n            schema: {\n              type: \"string\"\n            }\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"User ID\"\n                        },\n                        email: {\n                          type: \"string\",\n                          description: \"User email\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"User name\"\n                        },\n                        image: {\n                          type: \"string\",\n                          description: \"User image URL\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Indicates if the user email is verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          description: \"User creation date\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          description: \"User update date\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"image\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    },\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was verified successfully\"\n                    }\n                  },\n                  required: [\"user\", \"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    function redirectOnError(error) {\n      if (ctx.query.callbackURL) {\n        if (ctx.query.callbackURL.includes(\"?\")) {\n          throw ctx.redirect(`${ctx.query.callbackURL}&error=${error}`);\n        }\n        throw ctx.redirect(`${ctx.query.callbackURL}?error=${error}`);\n      }\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: error\n      });\n    }\n    const { token } = ctx.query;\n    let jwt;\n    try {\n      jwt = await jwtVerify(\n        token,\n        new TextEncoder().encode(ctx.context.secret),\n        {\n          algorithms: [\"HS256\"]\n        }\n      );\n    } catch (e) {\n      if (e instanceof JWTExpired) {\n        return redirectOnError(\"token_expired\");\n      }\n      return redirectOnError(\"invalid_token\");\n    }\n    const schema = z.object({\n      email: z.string().email(),\n      updateTo: z.string().optional()\n    });\n    const parsed = schema.parse(jwt.payload);\n    const user = await ctx.context.internalAdapter.findUserByEmail(\n      parsed.email\n    );\n    if (!user) {\n      return redirectOnError(\"user_not_found\");\n    }\n    if (parsed.updateTo) {\n      const session = await getSessionFromCtx(ctx);\n      if (!session) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      if (session.user.email !== parsed.email) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      const updatedUser2 = await ctx.context.internalAdapter.updateUserByEmail(\n        parsed.email,\n        {\n          email: parsed.updateTo,\n          emailVerified: false\n        },\n        ctx\n      );\n      const newToken = await createEmailVerificationToken(\n        ctx.context.secret,\n        parsed.updateTo\n      );\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        {\n          user: updatedUser2,\n          url: `${ctx.context.baseURL}/verify-email?token=${newToken}&callbackURL=${ctx.query.callbackURL || \"/\"}`,\n          token: newToken\n        },\n        ctx.request\n      );\n      await setSessionCookie(ctx, {\n        session: session.session,\n        user: {\n          ...session.user,\n          email: parsed.updateTo,\n          emailVerified: false\n        }\n      });\n      if (ctx.query.callbackURL) {\n        throw ctx.redirect(ctx.query.callbackURL);\n      }\n      return ctx.json({\n        status: true,\n        user: {\n          id: updatedUser2.id,\n          email: updatedUser2.email,\n          name: updatedUser2.name,\n          image: updatedUser2.image,\n          emailVerified: updatedUser2.emailVerified,\n          createdAt: updatedUser2.createdAt,\n          updatedAt: updatedUser2.updatedAt\n        }\n      });\n    }\n    if (ctx.context.options.emailVerification?.onEmailVerification) {\n      await ctx.context.options.emailVerification.onEmailVerification(\n        user.user,\n        ctx.request\n      );\n    }\n    const updatedUser = await ctx.context.internalAdapter.updateUserByEmail(\n      parsed.email,\n      {\n        emailVerified: true\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.afterEmailVerification) {\n      await ctx.context.options.emailVerification.afterEmailVerification(\n        updatedUser,\n        ctx.request\n      );\n    }\n    if (ctx.context.options.emailVerification?.autoSignInAfterVerification) {\n      const currentSession = await getSessionFromCtx(ctx);\n      if (!currentSession || currentSession.user.email !== parsed.email) {\n        const session = await ctx.context.internalAdapter.createSession(\n          user.user.id,\n          ctx\n        );\n        if (!session) {\n          throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n            message: \"Failed to create session\"\n          });\n        }\n        await setSessionCookie(ctx, {\n          session,\n          user: {\n            ...user.user,\n            emailVerified: true\n          }\n        });\n      } else {\n        await setSessionCookie(ctx, {\n          session: currentSession.session,\n          user: {\n            ...currentSession.user,\n            emailVerified: true\n          }\n        });\n      }\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL);\n    }\n    return ctx.json({\n      status: true,\n      user: null\n    });\n  }\n);\n\nconst HIDE_METADATA = {\n  isAction: false\n};\n\nasync function generateState(c, link) {\n  const callbackURL = c.body?.callbackURL || c.context.options.baseURL;\n  if (!callbackURL) {\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"callbackURL is required\"\n    });\n  }\n  const codeVerifier = generateRandomString(128);\n  const state = generateRandomString(32);\n  const stateCookie = c.context.createAuthCookie(\"state\", {\n    maxAge: 5 * 60 * 1e3\n    // 5 minutes\n  });\n  await c.setSignedCookie(\n    stateCookie.name,\n    state,\n    c.context.secret,\n    stateCookie.attributes\n  );\n  const data = JSON.stringify({\n    callbackURL,\n    codeVerifier,\n    errorURL: c.body?.errorCallbackURL,\n    newUserURL: c.body?.newUserCallbackURL,\n    link,\n    /**\n     * This is the actual expiry time of the state\n     */\n    expiresAt: Date.now() + 10 * 60 * 1e3,\n    requestSignUp: c.body?.requestSignUp\n  });\n  const expiresAt = /* @__PURE__ */ new Date();\n  expiresAt.setMinutes(expiresAt.getMinutes() + 10);\n  const verification = await c.context.internalAdapter.createVerificationValue(\n    {\n      value: data,\n      identifier: state,\n      expiresAt\n    },\n    c\n  );\n  if (!verification) {\n    c.context.logger.error(\n      \"Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database\"\n    );\n    throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n      message: \"Unable to create verification\"\n    });\n  }\n  return {\n    state: verification.identifier,\n    codeVerifier\n  };\n}\nasync function parseState(c) {\n  const state = c.query.state || c.body.state;\n  const data = await c.context.internalAdapter.findVerificationValue(state);\n  if (!data) {\n    c.context.logger.error(\"State Mismatch. Verification not found\", {\n      state\n    });\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  const parsedData = z.object({\n    callbackURL: z.string(),\n    codeVerifier: z.string(),\n    errorURL: z.string().optional(),\n    newUserURL: z.string().optional(),\n    expiresAt: z.number(),\n    link: z.object({\n      email: z.string(),\n      userId: z.coerce.string()\n    }).optional(),\n    requestSignUp: z.boolean().optional()\n  }).parse(JSON.parse(data.value));\n  if (!parsedData.errorURL) {\n    parsedData.errorURL = `${c.context.baseURL}/error`;\n  }\n  const stateCookie = c.context.createAuthCookie(\"state\");\n  const stateCookieValue = await c.getSignedCookie(\n    stateCookie.name,\n    c.context.secret\n  );\n  const skipStateCookieCheck = c.context.oauthConfig?.skipStateCookieCheck;\n  if (!skipStateCookieCheck && (!stateCookieValue || stateCookieValue !== state)) {\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=state_mismatch`);\n  }\n  c.setCookie(stateCookie.name, \"\", {\n    maxAge: 0\n  });\n  if (parsedData.expiresAt < Date.now()) {\n    await c.context.internalAdapter.deleteVerificationValue(data.id);\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  await c.context.internalAdapter.deleteVerificationValue(data.id);\n  return parsedData;\n}\n\nfunction decryptOAuthToken(token, ctx) {\n  if (!token) return token;\n  if (ctx.options.account?.encryptOAuthTokens) {\n    return symmetricDecrypt({\n      key: ctx.secret,\n      data: token\n    });\n  }\n  return token;\n}\nfunction setTokenUtil(token, ctx) {\n  if (ctx.options.account?.encryptOAuthTokens && token) {\n    return symmetricEncrypt({\n      key: ctx.secret,\n      data: token\n    });\n  }\n  return token;\n}\n\nasync function handleOAuthUserInfo(c, {\n  userInfo,\n  account,\n  callbackURL,\n  disableSignUp,\n  overrideUserInfo\n}) {\n  const dbUser = await c.context.internalAdapter.findOAuthUser(\n    userInfo.email.toLowerCase(),\n    account.accountId,\n    account.providerId\n  ).catch((e) => {\n    logger.error(\n      \"Better auth was unable to query your database.\\nError: \",\n      e\n    );\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=internal_server_error`);\n  });\n  let user = dbUser?.user;\n  let isRegister = !user;\n  if (dbUser) {\n    const hasBeenLinked = dbUser.accounts.find(\n      (a) => a.providerId === account.providerId && a.accountId === account.accountId\n    );\n    if (!hasBeenLinked) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        account.providerId\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        if (isDevelopment) {\n          logger.warn(\n            `User already exist but account isn't linked to ${account.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`\n          );\n        }\n        return {\n          error: \"account not linked\",\n          data: null\n        };\n      }\n      try {\n        await c.context.internalAdapter.linkAccount(\n          {\n            providerId: account.providerId,\n            accountId: userInfo.id.toString(),\n            userId: dbUser.user.id,\n            accessToken: await setTokenUtil(account.accessToken, c.context),\n            refreshToken: await setTokenUtil(account.refreshToken, c.context),\n            idToken: account.idToken,\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          },\n          c\n        );\n      } catch (e) {\n        logger.error(\"Unable to link account\", e);\n        return {\n          error: \"unable to link account\",\n          data: null\n        };\n      }\n      if (userInfo.emailVerified && !dbUser.user.emailVerified && userInfo.email.toLowerCase() === dbUser.user.email) {\n        await c.context.internalAdapter.updateUser(dbUser.user.id, {\n          emailVerified: true\n        });\n      }\n    } else {\n      if (c.context.options.account?.updateAccountOnSignIn !== false) {\n        const updateData = Object.fromEntries(\n          Object.entries({\n            idToken: account.idToken,\n            accessToken: await setTokenUtil(account.accessToken, c.context),\n            refreshToken: await setTokenUtil(account.refreshToken, c.context),\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          }).filter(([_, value]) => value !== void 0)\n        );\n        if (Object.keys(updateData).length > 0) {\n          await c.context.internalAdapter.updateAccount(\n            hasBeenLinked.id,\n            updateData,\n            c\n          );\n        }\n      }\n      if (userInfo.emailVerified && !dbUser.user.emailVerified && userInfo.email.toLowerCase() === dbUser.user.email) {\n        await c.context.internalAdapter.updateUser(dbUser.user.id, {\n          emailVerified: true\n        });\n      }\n    }\n    if (overrideUserInfo) {\n      const { id: _, ...restUserInfo } = userInfo;\n      await c.context.internalAdapter.updateUser(dbUser.user.id, {\n        ...restUserInfo,\n        email: userInfo.email.toLowerCase(),\n        emailVerified: userInfo.email.toLowerCase() === dbUser.user.email ? dbUser.user.emailVerified || userInfo.emailVerified : userInfo.emailVerified\n      });\n    }\n  } else {\n    if (disableSignUp) {\n      return {\n        error: \"signup disabled\",\n        data: null,\n        isRegister: false\n      };\n    }\n    try {\n      const { id: _, ...restUserInfo } = userInfo;\n      user = await c.context.internalAdapter.createOAuthUser(\n        {\n          ...restUserInfo,\n          email: userInfo.email.toLowerCase()\n        },\n        {\n          accessToken: await setTokenUtil(account.accessToken, c.context),\n          refreshToken: await setTokenUtil(account.refreshToken, c.context),\n          idToken: account.idToken,\n          accessTokenExpiresAt: account.accessTokenExpiresAt,\n          refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n          scope: account.scope,\n          providerId: account.providerId,\n          accountId: userInfo.id.toString()\n        },\n        c\n      ).then((res) => res?.user);\n      if (!userInfo.emailVerified && user && c.context.options.emailVerification?.sendOnSignUp) {\n        const token = await createEmailVerificationToken(\n          c.context.secret,\n          user.email,\n          void 0,\n          c.context.options.emailVerification?.expiresIn\n        );\n        const url = `${c.context.baseURL}/verify-email?token=${token}&callbackURL=${callbackURL}`;\n        await c.context.options.emailVerification?.sendVerificationEmail?.(\n          {\n            user,\n            url,\n            token\n          },\n          c.request\n        );\n      }\n    } catch (e) {\n      logger.error(e);\n      if (e instanceof APIError) {\n        return {\n          error: e.message,\n          data: null,\n          isRegister: false\n        };\n      }\n      return {\n        error: \"unable to create user\",\n        data: null,\n        isRegister: false\n      };\n    }\n  }\n  if (!user) {\n    return {\n      error: \"unable to create user\",\n      data: null,\n      isRegister: false\n    };\n  }\n  const session = await c.context.internalAdapter.createSession(user.id, c);\n  if (!session) {\n    return {\n      error: \"unable to create session\",\n      data: null,\n      isRegister: false\n    };\n  }\n  return {\n    data: {\n      session,\n      user\n    },\n    error: null,\n    isRegister\n  };\n}\n\nconst signInSocial = createAuthEndpoint(\n  \"/sign-in/social\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * Callback URL to redirect to after the user\n       * has signed in.\n       */\n      callbackURL: z.string().meta({\n        description: \"Callback URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * callback url to redirect if the user is newly registered.\n       *\n       * useful if you have different routes for existing users and new users\n       */\n      newUserCallbackURL: z.string().optional(),\n      /**\n       * Callback url to redirect to if an error happens\n       *\n       * If it's initiated from the client sdk this defaults to\n       * the current url.\n       */\n      errorCallbackURL: z.string().meta({\n        description: \"Callback URL to redirect to if an error happens\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use`\n       */\n      provider: SocialProviderListEnum,\n      /**\n       * Disable automatic redirection to the provider\n       *\n       * This is useful if you want to handle the redirection\n       * yourself like in a popup or a different tab.\n       */\n      disableRedirect: z.boolean().meta({\n        description: \"Disable automatic redirection to the provider. Useful for handling the redirection yourself\"\n      }).optional(),\n      /**\n       * ID token from the provider\n       *\n       * This is used to sign in the user\n       * if the user is already signed in with the\n       * provider in the frontend.\n       *\n       * Only applicable if the provider supports\n       * it. Currently only `apple` and `google` is\n       * supported out of the box.\n       */\n      idToken: z.optional(\n        z.object({\n          /**\n           * ID token from the provider\n           */\n          token: z.string().meta({\n            description: \"ID token from the provider\"\n          }),\n          /**\n           * The nonce used to generate the token\n           */\n          nonce: z.string().meta({\n            description: \"Nonce used to generate the token\"\n          }).optional(),\n          /**\n           * Access token from the provider\n           */\n          accessToken: z.string().meta({\n            description: \"Access token from the provider\"\n          }).optional(),\n          /**\n           * Refresh token from the provider\n           */\n          refreshToken: z.string().meta({\n            description: \"Refresh token from the provider\"\n          }).optional(),\n          /**\n           * Expiry date of the token\n           */\n          expiresAt: z.number().meta({\n            description: \"Expiry date of the token\"\n          }).optional()\n        })\n      ),\n      scopes: z.array(z.string()).meta({\n        description: \"Array of scopes to request from the provider. This will override the default scopes passed.\"\n      }).optional(),\n      /**\n       * Explicitly request sign-up\n       *\n       * Should be used to allow sign up when\n       * disableImplicitSignUp for this provider is\n       * true\n       */\n      requestSignUp: z.boolean().meta({\n        description: \"Explicitly request sign-up. Useful when disableImplicitSignUp is true for this provider\"\n      }).optional(),\n      /**\n       * The login hint to use for the authorization code request\n       */\n      loginHint: z.string().meta({\n        description: \"The login hint to use for the authorization code request\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with a social provider\",\n        operationId: \"socialSignIn\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\",\n                      url: {\n                        type: \"null\",\n                        nullable: true\n                      },\n                      user: {\n                        type: \"object\",\n                        properties: {\n                          id: { type: \"string\" },\n                          email: { type: \"string\" },\n                          name: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          image: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          emailVerified: {\n                            type: \"boolean\"\n                          },\n                          createdAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          },\n                          updatedAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          }\n                        },\n                        required: [\n                          \"id\",\n                          \"email\",\n                          \"emailVerified\",\n                          \"createdAt\",\n                          \"updatedAt\"\n                        ]\n                      }\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new APIError(\"NOT_FOUND\", {\n          message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.INVALID_TOKEN\n        });\n      }\n      const userInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!userInfo || !userInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n        });\n      }\n      if (!userInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const data = await handleOAuthUserInfo(c, {\n        userInfo: {\n          ...userInfo.user,\n          email: userInfo.user.email,\n          id: String(userInfo.user.id),\n          name: userInfo.user.name || \"\",\n          image: userInfo.user.image,\n          emailVerified: userInfo.user.emailVerified || false\n        },\n        account: {\n          providerId: provider.id,\n          accountId: String(userInfo.user.id),\n          accessToken: c.body.idToken.accessToken\n        },\n        callbackURL: c.body.callbackURL,\n        disableSignUp: provider.disableImplicitSignUp && !c.body.requestSignUp || provider.disableSignUp\n      });\n      if (data.error) {\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: data.error\n        });\n      }\n      await setSessionCookie(c, data.data);\n      return c.json({\n        redirect: false,\n        token: data.data.session.token,\n        url: void 0,\n        user: {\n          id: data.data.user.id,\n          email: data.data.user.email,\n          name: data.data.user.name,\n          image: data.data.user.image,\n          emailVerified: data.data.user.emailVerified,\n          createdAt: data.data.user.createdAt,\n          updatedAt: data.data.user.updatedAt\n        }\n      });\n    }\n    const { codeVerifier, state } = await generateState(c);\n    const url = await provider.createAuthorizationURL({\n      state,\n      codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes,\n      loginHint: c.body.loginHint\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: !c.body.disableRedirect\n    });\n  }\n);\nconst signInEmail = createAuthEndpoint(\n  \"/sign-in/email\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * Email of the user\n       */\n      email: z.string().meta({\n        description: \"Email of the user\"\n      }),\n      /**\n       * Password of the user\n       */\n      password: z.string().meta({\n        description: \"Password of the user\"\n      }),\n      /**\n       * Callback URL to use as a redirect for email\n       * verification and for possible redirects\n       */\n      callbackURL: z.string().meta({\n        description: \"Callback URL to use as a redirect for email verification\"\n      }).optional(),\n      /**\n       * If this is false, the session will not be remembered\n       * @default true\n       */\n      rememberMe: z.boolean().meta({\n        description: \"If this is false, the session will not be remembered. Default is `true`.\"\n      }).default(true).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with email and password\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\"\n                    },\n                    url: {\n                      type: \"null\",\n                      nullable: true\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: { type: \"string\" },\n                        email: { type: \"string\" },\n                        name: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        image: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options?.emailAndPassword?.enabled) {\n      ctx.context.logger.error(\n        \"Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!\"\n      );\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Email and password is not enabled\"\n      });\n    }\n    const { email, password } = ctx.body;\n    const isValidEmail = z.string().email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL\n      });\n    }\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      await ctx.context.password.hash(password);\n      ctx.context.logger.error(\"User not found\", { email });\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const credentialAccount = user.accounts.find(\n      (a) => a.providerId === \"credential\"\n    );\n    if (!credentialAccount) {\n      ctx.context.logger.error(\"Credential account not found\", { email });\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const currentPassword = credentialAccount?.password;\n    if (!currentPassword) {\n      ctx.context.logger.error(\"Password not found\", { email });\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const validPassword = await ctx.context.password.verify({\n      hash: currentPassword,\n      password\n    });\n    if (!validPassword) {\n      ctx.context.logger.error(\"Invalid password\");\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    if (ctx.context.options?.emailAndPassword?.requireEmailVerification && !user.user.emailVerified) {\n      if (!ctx.context.options?.emailVerification?.sendVerificationEmail) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n        });\n      }\n      if (ctx.context.options?.emailVerification?.sendOnSignIn) {\n        const token = await createEmailVerificationToken(\n          ctx.context.secret,\n          user.user.email,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: user.user,\n            url,\n            token\n          },\n          ctx.request\n        );\n      }\n      throw new APIError(\"FORBIDDEN\", {\n        message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      user.user.id,\n      ctx,\n      ctx.body.rememberMe === false\n    );\n    if (!session) {\n      ctx.context.logger.error(\"Failed to create session\");\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await setSessionCookie(\n      ctx,\n      {\n        session,\n        user: user.user\n      },\n      ctx.body.rememberMe === false\n    );\n    return ctx.json({\n      redirect: !!ctx.body.callbackURL,\n      token: session.token,\n      url: ctx.body.callbackURL,\n      user: {\n        id: user.user.id,\n        email: user.user.email,\n        name: user.user.name,\n        image: user.user.image,\n        emailVerified: user.user.emailVerified,\n        createdAt: user.user.createdAt,\n        updatedAt: user.user.updatedAt\n      }\n    });\n  }\n);\n\nconst schema = z.object({\n  code: z.string().optional(),\n  error: z.string().optional(),\n  device_id: z.string().optional(),\n  error_description: z.string().optional(),\n  state: z.string().optional(),\n  user: z.string().optional()\n});\nconst callbackOAuth = createAuthEndpoint(\n  \"/callback/:id\",\n  {\n    method: [\"GET\", \"POST\"],\n    body: schema.optional(),\n    query: schema.optional(),\n    metadata: HIDE_METADATA\n  },\n  async (c) => {\n    let queryOrBody;\n    const defaultErrorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    try {\n      if (c.method === \"GET\") {\n        queryOrBody = schema.parse(c.query);\n      } else if (c.method === \"POST\") {\n        queryOrBody = schema.parse(c.body);\n      } else {\n        throw new Error(\"Unsupported method\");\n      }\n    } catch (e) {\n      c.context.logger.error(\"INVALID_CALLBACK_REQUEST\", e);\n      throw c.redirect(`${defaultErrorURL}?error=invalid_callback_request`);\n    }\n    const { code, error, state, error_description, device_id } = queryOrBody;\n    if (!state) {\n      c.context.logger.error(\"State not found\", error);\n      const sep = defaultErrorURL.includes(\"?\") ? \"&\" : \"?\";\n      const url = `${defaultErrorURL}${sep}state=state_not_found`;\n      throw c.redirect(url);\n    }\n    const {\n      codeVerifier,\n      callbackURL,\n      link,\n      errorURL,\n      newUserURL,\n      requestSignUp\n    } = await parseState(c);\n    function redirectOnError(error2, description) {\n      const baseURL = errorURL ?? defaultErrorURL;\n      const params = new URLSearchParams({ error: error2 });\n      if (description) params.set(\"error_description\", description);\n      const sep = baseURL.includes(\"?\") ? \"&\" : \"?\";\n      const url = `${baseURL}${sep}${params.toString()}`;\n      throw c.redirect(url);\n    }\n    if (error) {\n      redirectOnError(error, error_description);\n    }\n    if (!code) {\n      c.context.logger.error(\"Code not found\");\n      throw redirectOnError(\"no_code\");\n    }\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.params.id\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Oauth provider with id\",\n        c.params.id,\n        \"not found\"\n      );\n      throw redirectOnError(\"oauth_provider_not_found\");\n    }\n    let tokens;\n    try {\n      tokens = await provider.validateAuthorizationCode({\n        code,\n        codeVerifier,\n        deviceId: device_id,\n        redirectURI: `${c.context.baseURL}/callback/${provider.id}`\n      });\n    } catch (e) {\n      c.context.logger.error(\"\", e);\n      throw redirectOnError(\"invalid_code\");\n    }\n    const userInfo = await provider.getUserInfo({\n      ...tokens,\n      user: c.body?.user ? safeJSONParse(c.body.user) : void 0\n    }).then((res) => res?.user);\n    if (!userInfo) {\n      c.context.logger.error(\"Unable to get user info\");\n      return redirectOnError(\"unable_to_get_user_info\");\n    }\n    if (!callbackURL) {\n      c.context.logger.error(\"No callback URL found\");\n      throw redirectOnError(\"no_callback_url\");\n    }\n    if (link) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        provider.id\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        c.context.logger.error(\"Unable to link account - untrusted provider\");\n        return redirectOnError(\"unable_to_link_account\");\n      }\n      if (userInfo.email !== link.email && c.context.options.account?.accountLinking?.allowDifferentEmails !== true) {\n        return redirectOnError(\"email_doesn't_match\");\n      }\n      const existingAccount = await c.context.internalAdapter.findAccount(\n        String(userInfo.id)\n      );\n      if (existingAccount) {\n        if (existingAccount.userId.toString() !== link.userId.toString()) {\n          return redirectOnError(\"account_already_linked_to_different_user\");\n        }\n        const updateData = Object.fromEntries(\n          Object.entries({\n            accessToken: await setTokenUtil(tokens.accessToken, c.context),\n            refreshToken: await setTokenUtil(tokens.refreshToken, c.context),\n            idToken: tokens.idToken,\n            accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n            refreshTokenExpiresAt: tokens.refreshTokenExpiresAt,\n            scope: tokens.scopes?.join(\",\")\n          }).filter(([_, value]) => value !== void 0)\n        );\n        await c.context.internalAdapter.updateAccount(\n          existingAccount.id,\n          updateData\n        );\n      } else {\n        const newAccount = await c.context.internalAdapter.createAccount(\n          {\n            userId: link.userId,\n            providerId: provider.id,\n            accountId: String(userInfo.id),\n            ...tokens,\n            accessToken: await setTokenUtil(tokens.accessToken, c.context),\n            refreshToken: await setTokenUtil(tokens.refreshToken, c.context),\n            scope: tokens.scopes?.join(\",\")\n          },\n          c\n        );\n        if (!newAccount) {\n          return redirectOnError(\"unable_to_link_account\");\n        }\n      }\n      let toRedirectTo2;\n      try {\n        const url = callbackURL;\n        toRedirectTo2 = url.toString();\n      } catch {\n        toRedirectTo2 = callbackURL;\n      }\n      throw c.redirect(toRedirectTo2);\n    }\n    if (!userInfo.email) {\n      c.context.logger.error(\n        \"Provider did not return email. This could be due to misconfiguration in the provider settings.\"\n      );\n      return redirectOnError(\"email_not_found\");\n    }\n    const result = await handleOAuthUserInfo(c, {\n      userInfo: {\n        ...userInfo,\n        id: String(userInfo.id),\n        email: userInfo.email,\n        name: userInfo.name || userInfo.email\n      },\n      account: {\n        providerId: provider.id,\n        accountId: String(userInfo.id),\n        ...tokens,\n        scope: tokens.scopes?.join(\",\")\n      },\n      callbackURL,\n      disableSignUp: provider.disableImplicitSignUp && !requestSignUp || provider.options?.disableSignUp,\n      overrideUserInfo: provider.options?.overrideUserInfoOnSignIn\n    });\n    if (result.error) {\n      c.context.logger.error(result.error.split(\" \").join(\"_\"));\n      return redirectOnError(result.error.split(\" \").join(\"_\"));\n    }\n    const { session, user } = result.data;\n    await setSessionCookie(c, {\n      session,\n      user\n    });\n    let toRedirectTo;\n    try {\n      const url = result.isRegister ? newUserURL || callbackURL : callbackURL;\n      toRedirectTo = url.toString();\n    } catch {\n      toRedirectTo = result.isRegister ? newUserURL || callbackURL : callbackURL;\n    }\n    throw c.redirect(toRedirectTo);\n  }\n);\n\nconst signOut = createAuthEndpoint(\n  \"/sign-out\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Sign out the current user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const sessionCookieToken = await ctx.getSignedCookie(\n      ctx.context.authCookies.sessionToken.name,\n      ctx.context.secret\n    );\n    if (!sessionCookieToken) {\n      deleteSessionCookie(ctx);\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n    await ctx.context.internalAdapter.deleteSession(sessionCookieToken);\n    deleteSessionCookie(ctx);\n    return ctx.json({\n      success: true\n    });\n  }\n);\n\nfunction redirectError(ctx, callbackURL, query) {\n  const url = callbackURL ? new URL(callbackURL, ctx.baseURL) : new URL(`${ctx.baseURL}/error`);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nfunction redirectCallback(ctx, callbackURL, query) {\n  const url = new URL(callbackURL, ctx.baseURL);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nconst requestPasswordReset = createAuthEndpoint(\n  \"/request-password-reset\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: z.email().meta({\n        description: \"The email address of the user to send a password reset email to\"\n      }),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: z.string().meta({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = getDate(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = generateId(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true,\n      message: \"If this email exists in our system, check your email for the reset link\"\n    });\n  }\n);\nconst forgetPassword = createAuthEndpoint(\n  \"/forget-password\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: z.string().email().meta({\n        description: \"The email address of the user to send a password reset email to\"\n      }),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: z.string().meta({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = getDate(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = generateId(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst requestPasswordResetCallback = createAuthEndpoint(\n  \"/reset-password/:token\",\n  {\n    method: \"GET\",\n    query: z.object({\n      callbackURL: z.string().meta({\n        description: \"The URL to redirect the user to reset their password\"\n      })\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Redirects the user to the callback URL with the token\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { token } = ctx.params;\n    const { callbackURL } = ctx.query;\n    if (!token || !callbackURL) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    const verification = await ctx.context.internalAdapter.findVerificationValue(\n      `reset-password:${token}`\n    );\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    throw ctx.redirect(redirectCallback(ctx.context, callbackURL, { token }));\n  }\n);\nconst forgetPasswordCallback = requestPasswordResetCallback;\nconst resetPassword = createAuthEndpoint(\n  \"/reset-password\",\n  {\n    method: \"POST\",\n    query: z.object({\n      token: z.string().optional()\n    }).optional(),\n    body: z.object({\n      newPassword: z.string().meta({\n        description: \"The new password to set\"\n      }),\n      token: z.string().meta({\n        description: \"The token to reset the password\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Reset the password for a user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token || ctx.query?.token;\n    if (!token) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const { newPassword } = ctx.body;\n    const minLength = ctx.context.password?.config.minPasswordLength;\n    const maxLength = ctx.context.password?.config.maxPasswordLength;\n    if (newPassword.length < minLength) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    if (newPassword.length > maxLength) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const id = `reset-password:${token}`;\n    const verification = await ctx.context.internalAdapter.findVerificationValue(id);\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const userId = verification.value;\n    const hashedPassword = await ctx.context.password.hash(newPassword);\n    const accounts = await ctx.context.internalAdapter.findAccounts(userId);\n    const account = accounts.find((ac) => ac.providerId === \"credential\");\n    if (!account) {\n      await ctx.context.internalAdapter.createAccount(\n        {\n          userId,\n          providerId: \"credential\",\n          password: hashedPassword,\n          accountId: userId\n        },\n        ctx\n      );\n    } else {\n      await ctx.context.internalAdapter.updatePassword(\n        userId,\n        hashedPassword,\n        ctx\n      );\n    }\n    await ctx.context.internalAdapter.deleteVerificationValue(verification.id);\n    if (ctx.context.options.emailAndPassword?.onPasswordReset) {\n      const user = await ctx.context.internalAdapter.findUserById(userId);\n      if (user) {\n        await ctx.context.options.emailAndPassword.onPasswordReset(\n          {\n            user\n          },\n          ctx.request\n        );\n      }\n    }\n    if (ctx.context.options.emailAndPassword?.revokeSessionsOnPasswordReset) {\n      await ctx.context.internalAdapter.deleteSessions(userId);\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nconst updateUser = () => createAuthEndpoint(\n  \"/update-user\",\n  {\n    method: \"POST\",\n    body: z.record(\n      z.string().meta({\n        description: \"Field name must be a string\"\n      }),\n      z.any()\n    ),\n    use: [sessionMiddleware],\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Update the current user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  image: {\n                    type: \"string\",\n                    description: \"The image of the user\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the update was successful\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const body = ctx.body;\n    if (body.email) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.EMAIL_CAN_NOT_BE_UPDATED\n      });\n    }\n    const { name, image, ...rest } = body;\n    const session = ctx.context.session;\n    if (image === void 0 && name === void 0 && Object.keys(rest).length === 0) {\n      return ctx.json({\n        status: true\n      });\n    }\n    const user = await ctx.context.internalAdapter.updateUser(\n      session.user.id,\n      {\n        name,\n        image,\n        ...rest\n      },\n      ctx\n    );\n    await setSessionCookie(ctx, {\n      session: session.session,\n      user\n    });\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst changePassword = createAuthEndpoint(\n  \"/change-password\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * The new password to set\n       */\n      newPassword: z.string().meta({\n        description: \"The new password to set\"\n      }),\n      /**\n       * The current password of the user\n       */\n      currentPassword: z.string().meta({\n        description: \"The current password is required\"\n      }),\n      /**\n       * revoke all sessions that are not the\n       * current one logged in by the user\n       */\n      revokeOtherSessions: z.boolean().meta({\n        description: \"Must be a boolean value\"\n      }).optional()\n    }),\n    use: [sensitiveSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Change the password of the user\",\n        responses: {\n          \"200\": {\n            description: \"Password successfully changed\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      // Only present if revokeOtherSessions is true\n                      description: \"New session token if other sessions were revoked\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { newPassword, currentPassword, revokeOtherSessions } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    if (!account || !account.password) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n      });\n    }\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    const verify = await ctx.context.password.verify({\n      hash: account.password,\n      password: currentPassword\n    });\n    if (!verify) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_PASSWORD\n      });\n    }\n    await ctx.context.internalAdapter.updateAccount(account.id, {\n      password: passwordHash\n    });\n    let token = null;\n    if (revokeOtherSessions) {\n      await ctx.context.internalAdapter.deleteSessions(session.user.id);\n      const newSession = await ctx.context.internalAdapter.createSession(\n        session.user.id,\n        ctx\n      );\n      if (!newSession) {\n        throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n        });\n      }\n      await setSessionCookie(ctx, {\n        session: newSession,\n        user: session.user\n      });\n      token = newSession.token;\n    }\n    return ctx.json({\n      token,\n      user: {\n        id: session.user.id,\n        email: session.user.email,\n        name: session.user.name,\n        image: session.user.image,\n        emailVerified: session.user.emailVerified,\n        createdAt: session.user.createdAt,\n        updatedAt: session.user.updatedAt\n      }\n    });\n  }\n);\nconst setPassword = createAuthEndpoint(\n  \"/set-password\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * The new password to set\n       */\n      newPassword: z.string().meta({\n        description: \"The new password to set is required\"\n      })\n    }),\n    metadata: {\n      SERVER_ONLY: true\n    },\n    use: [sensitiveSessionMiddleware]\n  },\n  async (ctx) => {\n    const { newPassword } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    if (!account) {\n      await ctx.context.internalAdapter.linkAccount(\n        {\n          userId: session.user.id,\n          providerId: \"credential\",\n          accountId: session.user.id,\n          password: passwordHash\n        },\n        ctx\n      );\n      return ctx.json({\n        status: true\n      });\n    }\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"user already has a password\"\n    });\n  }\n);\nconst deleteUser = createAuthEndpoint(\n  \"/delete-user\",\n  {\n    method: \"POST\",\n    use: [sensitiveSessionMiddleware],\n    body: z.object({\n      /**\n       * The callback URL to redirect to after the user is deleted\n       * this is only used on delete user callback\n       */\n      callbackURL: z.string().meta({\n        description: \"The callback URL to redirect to after the user is deleted\"\n      }).optional(),\n      /**\n       * The password of the user. If the password isn't provided, session freshness\n       * will be checked.\n       */\n      password: z.string().meta({\n        description: \"The password of the user is required to delete the user\"\n      }).optional(),\n      /**\n       * The token to delete the user. If the token is provided, the user will be deleted\n       */\n      token: z.string().meta({\n        description: \"The token to delete the user is required\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Delete the user\",\n        responses: {\n          \"200\": {\n            description: \"User deletion processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the operation was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\", \"Verification email sent\"],\n                      description: \"Status message of the deletion process\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\",\n        {\n          session: ctx.context.session\n        }\n      );\n      throw new APIError(\"NOT_FOUND\");\n    }\n    const session = ctx.context.session;\n    if (ctx.body.password) {\n      const accounts = await ctx.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const account = accounts.find(\n        (account2) => account2.providerId === \"credential\" && account2.password\n      );\n      if (!account || !account.password) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n        });\n      }\n      const verify = await ctx.context.password.verify({\n        hash: account.password,\n        password: ctx.body.password\n      });\n      if (!verify) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.INVALID_PASSWORD\n        });\n      }\n    }\n    if (ctx.body.token) {\n      await deleteUserCallback({\n        ...ctx,\n        query: {\n          token: ctx.body.token\n        }\n      });\n      return ctx.json({\n        success: true,\n        message: \"User deleted\"\n      });\n    }\n    if (ctx.context.options.user.deleteUser?.sendDeleteAccountVerification) {\n      const token = generateRandomString(32, \"0-9\", \"a-z\");\n      await ctx.context.internalAdapter.createVerificationValue(\n        {\n          value: session.user.id,\n          identifier: `delete-account-${token}`,\n          expiresAt: new Date(\n            Date.now() + (ctx.context.options.user.deleteUser?.deleteTokenExpiresIn || 60 * 60 * 24) * 1e3\n          )\n        },\n        ctx\n      );\n      const url = `${ctx.context.baseURL}/delete-user/callback?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n      await ctx.context.options.user.deleteUser.sendDeleteAccountVerification(\n        {\n          user: session.user,\n          url,\n          token\n        },\n        ctx.request\n      );\n      return ctx.json({\n        success: true,\n        message: \"Verification email sent\"\n      });\n    }\n    if (!ctx.body.password && ctx.context.sessionConfig.freshAge !== 0) {\n      const currentAge = new Date(session.session.createdAt).getTime();\n      const freshAge = ctx.context.sessionConfig.freshAge * 1e3;\n      const now = Date.now();\n      if (now - currentAge > freshAge * 1e3) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.SESSION_EXPIRED\n        });\n      }\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    deleteSessionCookie(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst deleteUserCallback = createAuthEndpoint(\n  \"/delete-user/callback\",\n  {\n    method: \"GET\",\n    query: z.object({\n      token: z.string().meta({\n        description: \"The token to verify the deletion request\"\n      }),\n      callbackURL: z.string().meta({\n        description: \"The URL to redirect to after deletion\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Callback to complete user deletion with verification token\",\n        responses: {\n          \"200\": {\n            description: \"User successfully deleted\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the deletion was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\"],\n                      description: \"Confirmation message\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\"\n      );\n      throw new APIError(\"NOT_FOUND\");\n    }\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      throw new APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n      });\n    }\n    const token = await ctx.context.internalAdapter.findVerificationValue(\n      `delete-account-${ctx.query.token}`\n    );\n    if (!token || token.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    if (token.value !== session.user.id) {\n      throw new APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    await ctx.context.internalAdapter.deleteVerificationValue(token.id);\n    deleteSessionCookie(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL || \"/\");\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst changeEmail = createAuthEndpoint(\n  \"/change-email\",\n  {\n    method: \"POST\",\n    body: z.object({\n      newEmail: z.email().meta({\n        description: \"The new email address to set must be a valid email address\"\n      }),\n      callbackURL: z.string().meta({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [sensitiveSessionMiddleware],\n    metadata: {\n      openapi: {\n        responses: {\n          \"200\": {\n            description: \"Email change request processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the request was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"Email updated\", \"Verification email sent\"],\n                      description: \"Status message of the email change process\",\n                      nullable: true\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          },\n          \"422\": {\n            description: \"Unprocessable Entity. Email already exists\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.changeEmail?.enabled) {\n      ctx.context.logger.error(\"Change email is disabled.\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Change email is disabled\"\n      });\n    }\n    const newEmail = ctx.body.newEmail.toLowerCase();\n    if (newEmail === ctx.context.session.user.email) {\n      ctx.context.logger.error(\"Email is the same\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Email is the same\"\n      });\n    }\n    const existingUser = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n    if (existingUser) {\n      ctx.context.logger.error(\"Email already exists\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Couldn't update your email\"\n      });\n    }\n    if (ctx.context.session.user.emailVerified !== true) {\n      const existing = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n      if (existing) {\n        throw new APIError(\"UNPROCESSABLE_ENTITY\", {\n          message: BASE_ERROR_CODES.USER_ALREADY_EXISTS_USE_ANOTHER_EMAIL\n        });\n      }\n      await ctx.context.internalAdapter.updateUserByEmail(\n        ctx.context.session.user.email,\n        {\n          email: newEmail\n        },\n        ctx\n      );\n      await setSessionCookie(ctx, {\n        session: ctx.context.session.session,\n        user: {\n          ...ctx.context.session.user,\n          email: newEmail\n        }\n      });\n      if (ctx.context.options.emailVerification?.sendVerificationEmail) {\n        const token2 = await createEmailVerificationToken(\n          ctx.context.secret,\n          newEmail,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url2 = `${ctx.context.baseURL}/verify-email?token=${token2}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: {\n              ...ctx.context.session.user,\n              email: newEmail\n            },\n            url: url2,\n            token: token2\n          },\n          ctx.request\n        );\n      }\n      return ctx.json({\n        status: true\n      });\n    }\n    if (!ctx.context.options.user.changeEmail.sendChangeEmailVerification) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const token = await createEmailVerificationToken(\n      ctx.context.secret,\n      ctx.context.session.user.email,\n      newEmail,\n      ctx.context.options.emailVerification?.expiresIn\n    );\n    const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n    await ctx.context.options.user.changeEmail.sendChangeEmailVerification(\n      {\n        user: ctx.context.session.user,\n        newEmail,\n        url,\n        token\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nfunction sanitize(input) {\n  return input.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n}\nconst html = (errorCode = \"Unknown\") => `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Authentication Error</title>\n    <style>\n        :root {\n            --bg-color: #f8f9fa;\n            --text-color: #212529;\n            --accent-color: #000000;\n            --error-color: #dc3545;\n            --border-color: #e9ecef;\n        }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            line-height: 1.5;\n        }\n        .error-container {\n            background-color: #ffffff;\n            border-radius: 12px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\n            padding: 2.5rem;\n            text-align: center;\n            max-width: 90%;\n            width: 400px;\n        }\n        h1 {\n            color: var(--error-color);\n            font-size: 1.75rem;\n            margin-bottom: 1rem;\n            font-weight: 600;\n        }\n        p {\n            margin-bottom: 1.5rem;\n            color: #495057;\n        }\n        .btn {\n            background-color: var(--accent-color);\n            color: #ffffff;\n            text-decoration: none;\n            padding: 0.75rem 1.5rem;\n            border-radius: 6px;\n            transition: all 0.3s ease;\n            display: inline-block;\n            font-weight: 500;\n            border: 2px solid var(--accent-color);\n        }\n        .btn:hover {\n            background-color: #131721;\n        }\n        .error-code {\n            font-size: 0.875rem;\n            color: #6c757d;\n            margin-top: 1.5rem;\n            padding-top: 1.5rem;\n            border-top: 1px solid var(--border-color);\n        }\n        .icon {\n            font-size: 3rem;\n            margin-bottom: 1rem;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"error-container\">\n        <div class=\"icon\">\\u26A0\\uFE0F</div>\n        <h1>Better Auth Error</h1>\n        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>\n        <a href=\"/\" id=\"returnLink\" class=\"btn\">Return to Application</a>\n        <div class=\"error-code\">Error Code: <span id=\"errorCode\">${sanitize(\n  errorCode\n)}</span></div>\n    </div>\n</body>\n</html>`;\nconst error = createAuthEndpoint(\n  \"/error\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Displays an error page\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"text/html\": {\n                schema: {\n                  type: \"string\",\n                  description: \"The HTML content of the error page\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const query = new URL(c.request?.url || \"\").searchParams.get(\"error\") || \"Unknown\";\n    return new Response(html(query), {\n      headers: {\n        \"Content-Type\": \"text/html\"\n      }\n    });\n  }\n);\n\nconst ok = createAuthEndpoint(\n  \"/ok\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Check if the API is working\",\n        responses: {\n          \"200\": {\n            description: \"API is working\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    ok: {\n                      type: \"boolean\",\n                      description: \"Indicates if the API is working\"\n                    }\n                  },\n                  required: [\"ok\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    return ctx.json({\n      ok: true\n    });\n  }\n);\n\nconst listUserAccounts = createAuthEndpoint(\n  \"/list-accounts\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"List all accounts linked to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\"\n                      },\n                      providerId: {\n                        type: \"string\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      },\n                      accountId: {\n                        type: \"string\"\n                      },\n                      scopes: {\n                        type: \"array\",\n                        items: {\n                          type: \"string\"\n                        }\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"providerId\",\n                      \"createdAt\",\n                      \"updatedAt\",\n                      \"accountId\",\n                      \"scopes\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const accounts = await c.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    return c.json(\n      accounts.map((a) => ({\n        id: a.id,\n        providerId: a.providerId,\n        createdAt: a.createdAt,\n        updatedAt: a.updatedAt,\n        accountId: a.accountId,\n        scopes: a.scope?.split(\",\") || []\n      }))\n    );\n  }\n);\nconst linkSocialAccount = createAuthEndpoint(\n  \"/link-social\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    body: z.object({\n      /**\n       * Callback URL to redirect to after the user has signed in.\n       */\n      callbackURL: z.string().meta({\n        description: \"The URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use\n       */\n      provider: SocialProviderListEnum,\n      /**\n       * ID Token for direct authentication without redirect\n       */\n      idToken: z.object({\n        token: z.string(),\n        nonce: z.string().optional(),\n        accessToken: z.string().optional(),\n        refreshToken: z.string().optional(),\n        scopes: z.array(z.string()).optional()\n      }).optional(),\n      /**\n       * Whether to allow sign up for new users\n       */\n      requestSignUp: z.boolean().optional(),\n      /**\n       * Additional scopes to request when linking the account.\n       * This is useful for requesting additional permissions when\n       * linking a social account compared to the initial authentication.\n       */\n      scopes: z.array(z.string()).meta({\n        description: \"Additional scopes to request from the provider\"\n      }).optional(),\n      /**\n       * The URL to redirect to if there is an error during the link process.\n       */\n      errorCallbackURL: z.string().meta({\n        description: \"The URL to redirect to if there is an error during the link process\"\n      }).optional(),\n      /**\n       * Disable automatic redirection to the provider\n       *\n       * This is useful if you want to handle the redirection\n       * yourself like in a popup or a different tab.\n       */\n      disableRedirect: z.boolean().meta({\n        description: \"Disable automatic redirection to the provider. Useful for handling the redirection yourself\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Link a social account to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    url: {\n                      type: \"string\",\n                      description: \"The authorization URL to redirect the user to\"\n                    },\n                    redirect: {\n                      type: \"boolean\",\n                      description: \"Indicates if the user should be redirected to the authorization URL\"\n                    },\n                    status: {\n                      type: \"boolean\"\n                    }\n                  },\n                  required: [\"redirect\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new APIError(\"NOT_FOUND\", {\n          message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.INVALID_TOKEN\n        });\n      }\n      const linkingUserInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!linkingUserInfo || !linkingUserInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n        });\n      }\n      const linkingUserId = String(linkingUserInfo.user.id);\n      if (!linkingUserInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const existingAccounts = await c.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const hasBeenLinked = existingAccounts.find(\n        (a) => a.providerId === provider.id && a.accountId === linkingUserId\n      );\n      if (hasBeenLinked) {\n        return c.json({\n          url: \"\",\n          // this is for type inference\n          status: true,\n          redirect: false\n        });\n      }\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(provider.id);\n      if (!isTrustedProvider && !linkingUserInfo.user.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - linking not allowed\"\n        });\n      }\n      if (linkingUserInfo.user.email !== session.user.email && c.context.options.account?.accountLinking?.allowDifferentEmails !== true) {\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - different emails not allowed\"\n        });\n      }\n      try {\n        await c.context.internalAdapter.createAccount(\n          {\n            userId: session.user.id,\n            providerId: provider.id,\n            accountId: linkingUserId,\n            accessToken: c.body.idToken.accessToken,\n            idToken: token,\n            refreshToken: c.body.idToken.refreshToken,\n            scope: c.body.idToken.scopes?.join(\",\")\n          },\n          c\n        );\n      } catch (e) {\n        throw new APIError(\"EXPECTATION_FAILED\", {\n          message: \"Account not linked - unable to create account\"\n        });\n      }\n      if (c.context.options.account?.accountLinking?.updateUserInfoOnLink === true) {\n        try {\n          await c.context.internalAdapter.updateUser(session.user.id, {\n            name: linkingUserInfo.user?.name,\n            image: linkingUserInfo.user?.image\n          });\n        } catch (e) {\n          console.warn(\"Could not update user - \" + e.toString());\n        }\n      }\n      return c.json({\n        url: \"\",\n        // this is for type inference\n        status: true,\n        redirect: false\n      });\n    }\n    const state = await generateState(c, {\n      userId: session.user.id,\n      email: session.user.email\n    });\n    const url = await provider.createAuthorizationURL({\n      state: state.state,\n      codeVerifier: state.codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: !c.body.disableRedirect\n    });\n  }\n);\nconst unlinkAccount = createAuthEndpoint(\n  \"/unlink-account\",\n  {\n    method: \"POST\",\n    body: z.object({\n      providerId: z.string(),\n      accountId: z.string().optional()\n    }),\n    use: [freshSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Unlink an account\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId } = ctx.body;\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      ctx.context.session.user.id\n    );\n    if (accounts.length === 1 && !ctx.context.options.account?.accountLinking?.allowUnlinkingAll) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_UNLINK_LAST_ACCOUNT\n      });\n    }\n    const accountExist = accounts.find(\n      (account) => accountId ? account.accountId === accountId && account.providerId === providerId : account.providerId === providerId\n    );\n    if (!accountExist) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.ACCOUNT_NOT_FOUND\n      });\n    }\n    await ctx.context.internalAdapter.deleteAccount(accountExist.id);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst getAccessToken = createAuthEndpoint(\n  \"/get-access-token\",\n  {\n    method: \"POST\",\n    body: z.object({\n      providerId: z.string().meta({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: z.string().meta({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: z.string().meta({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Get a valid access token, doing a refresh if needed\",\n        responses: {\n          200: {\n            description: \"A Valid access token\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    if (!ctx.context.socialProviders.find((p) => p.id === providerId)) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} is not supported.`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    try {\n      let newTokens = null;\n      const accessTokenExpired = account.accessTokenExpiresAt && new Date(account.accessTokenExpiresAt).getTime() - Date.now() < 5e3;\n      if (account.refreshToken && accessTokenExpired && provider.refreshAccessToken) {\n        newTokens = await provider.refreshAccessToken(\n          account.refreshToken\n        );\n        await ctx.context.internalAdapter.updateAccount(account.id, {\n          accessToken: await setTokenUtil(newTokens.accessToken, ctx.context),\n          accessTokenExpiresAt: newTokens.accessTokenExpiresAt,\n          refreshToken: await setTokenUtil(newTokens.refreshToken, ctx.context),\n          refreshTokenExpiresAt: newTokens.refreshTokenExpiresAt\n        });\n      }\n      const tokens = {\n        accessToken: await decryptOAuthToken(\n          newTokens?.accessToken ?? account.accessToken ?? \"\",\n          ctx.context\n        ),\n        accessTokenExpiresAt: newTokens?.accessTokenExpiresAt ?? account.accessTokenExpiresAt ?? void 0,\n        scopes: account.scope?.split(\",\") ?? [],\n        idToken: newTokens?.idToken ?? account.idToken ?? void 0\n      };\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Failed to get a valid access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst refreshToken = createAuthEndpoint(\n  \"/refresh-token\",\n  {\n    method: \"POST\",\n    body: z.object({\n      providerId: z.string().meta({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: z.string().meta({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: z.string().meta({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Refresh the access token using a refresh token\",\n        responses: {\n          200: {\n            description: \"Access token refreshed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    if (!provider.refreshAccessToken) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} does not support token refreshing.`\n      });\n    }\n    try {\n      const tokens = await provider.refreshAccessToken(\n        account.refreshToken\n      );\n      await ctx.context.internalAdapter.updateAccount(account.id, {\n        accessToken: await setTokenUtil(tokens.accessToken, ctx.context),\n        refreshToken: await setTokenUtil(tokens.refreshToken, ctx.context),\n        accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n        refreshTokenExpiresAt: tokens.refreshTokenExpiresAt\n      });\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Failed to refresh access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst accountInfo = createAuthEndpoint(\n  \"/account-info\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Get the account info provided by the provider\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        name: {\n                          type: \"string\"\n                        },\n                        email: {\n                          type: \"string\"\n                        },\n                        image: {\n                          type: \"string\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        }\n                      },\n                      required: [\"id\", \"emailVerified\"]\n                    },\n                    data: {\n                      type: \"object\",\n                      properties: {},\n                      additionalProperties: true\n                    }\n                  },\n                  required: [\"user\", \"data\"],\n                  additionalProperties: false\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    body: z.object({\n      accountId: z.string().meta({\n        description: \"The provider given account id for which to get the account info\"\n      })\n    })\n  },\n  async (ctx) => {\n    const account = await ctx.context.internalAdapter.findAccount(\n      ctx.body.accountId\n    );\n    if (!account || account.userId !== ctx.context.session.user.id) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === account.providerId\n    );\n    if (!provider) {\n      throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: `Provider account provider is ${account.providerId} but it is not configured`\n      });\n    }\n    const tokens = await getAccessToken({\n      ...ctx,\n      body: {\n        accountId: account.id,\n        providerId: account.providerId\n      },\n      returnHeaders: false\n    });\n    if (!tokens.accessToken) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Access token not found\"\n      });\n    }\n    const info = await provider.getUserInfo({\n      ...tokens,\n      accessToken: tokens.accessToken\n    });\n    return ctx.json(info);\n  }\n);\n\nconst defuReplaceArrays = createDefu((obj, key, value) => {\n  if (Array.isArray(obj[key]) && Array.isArray(value)) {\n    obj[key] = value;\n    return true;\n  }\n});\nfunction toAuthEndpoints(endpoints, ctx) {\n  const api = {};\n  for (const [key, endpoint] of Object.entries(endpoints)) {\n    api[key] = async (context) => {\n      const authContext = await ctx;\n      let internalContext = {\n        ...context,\n        context: {\n          ...authContext,\n          returned: void 0,\n          responseHeaders: void 0,\n          session: null\n        },\n        path: endpoint.path,\n        headers: context?.headers ? new Headers(context?.headers) : void 0\n      };\n      const { beforeHooks, afterHooks } = getHooks(authContext);\n      const before = await runBeforeHooks(internalContext, beforeHooks);\n      if (\"context\" in before && before.context && typeof before.context === \"object\") {\n        const { headers, ...rest } = before.context;\n        if (headers) {\n          headers.forEach((value, key2) => {\n            internalContext.headers.set(key2, value);\n          });\n        }\n        internalContext = defuReplaceArrays(rest, internalContext);\n      } else if (before) {\n        return context?.asResponse ? toResponse(before, {\n          headers: context?.headers\n        }) : context?.returnHeaders ? {\n          headers: context?.headers,\n          response: before\n        } : before;\n      }\n      internalContext.asResponse = false;\n      internalContext.returnHeaders = true;\n      const result = await endpoint(internalContext).catch((e) => {\n        if (e instanceof APIError) {\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      if (result && result instanceof Response) {\n        return result;\n      }\n      internalContext.context.returned = result.response;\n      internalContext.context.responseHeaders = result.headers;\n      const after = await runAfterHooks(internalContext, afterHooks);\n      if (after.response) {\n        result.response = after.response;\n      }\n      if (result.response instanceof APIError && shouldPublishLog(authContext.logger.level, \"debug\")) {\n        result.response.stack = result.response.errorStack;\n      }\n      if (result.response instanceof APIError && !context?.asResponse) {\n        throw result.response;\n      }\n      const response = context?.asResponse ? toResponse(result.response, {\n        headers: result.headers\n      }) : context?.returnHeaders ? {\n        headers: result.headers,\n        response: result.response\n      } : result.response;\n      return response;\n    };\n    api[key].path = endpoint.path;\n    api[key].options = endpoint.options;\n  }\n  return api;\n}\nasync function runBeforeHooks(context, hooks) {\n  let modifiedContext = {};\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler({\n        ...context,\n        returnHeaders: false\n      }).catch((e) => {\n        if (e instanceof APIError && shouldPublishLog(context.context.logger.level, \"debug\")) {\n          e.stack = e.errorStack;\n        }\n        throw e;\n      });\n      if (result && typeof result === \"object\") {\n        if (\"context\" in result && typeof result.context === \"object\") {\n          const { headers, ...rest } = result.context;\n          if (headers instanceof Headers) {\n            if (modifiedContext.headers) {\n              headers.forEach((value, key) => {\n                modifiedContext.headers?.set(key, value);\n              });\n            } else {\n              modifiedContext.headers = headers;\n            }\n          }\n          modifiedContext = defuReplaceArrays(rest, modifiedContext);\n          continue;\n        }\n        return result;\n      }\n    }\n  }\n  return { context: modifiedContext };\n}\nasync function runAfterHooks(context, hooks) {\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler(context).catch((e) => {\n        if (e instanceof APIError) {\n          if (shouldPublishLog(context.context.logger.level, \"debug\")) {\n            e.stack = e.errorStack;\n          }\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      if (result.headers) {\n        result.headers.forEach((value, key) => {\n          if (!context.context.responseHeaders) {\n            context.context.responseHeaders = new Headers({\n              [key]: value\n            });\n          } else {\n            if (key.toLowerCase() === \"set-cookie\") {\n              context.context.responseHeaders.append(key, value);\n            } else {\n              context.context.responseHeaders.set(key, value);\n            }\n          }\n        });\n      }\n      if (result.response) {\n        context.context.returned = result.response;\n      }\n    }\n  }\n  return {\n    response: context.context.returned,\n    headers: context.context.responseHeaders\n  };\n}\nfunction getHooks(authContext) {\n  const plugins = authContext.options.plugins || [];\n  const beforeHooks = [];\n  const afterHooks = [];\n  if (authContext.options.hooks?.before) {\n    beforeHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.before\n    });\n  }\n  if (authContext.options.hooks?.after) {\n    afterHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.after\n    });\n  }\n  const pluginBeforeHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.before) {\n      return plugin.hooks.before;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  const pluginAfterHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.after) {\n      return plugin.hooks.after;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  pluginBeforeHooks.length && beforeHooks.push(...pluginBeforeHooks);\n  pluginAfterHooks.length && afterHooks.push(...pluginAfterHooks);\n  return {\n    beforeHooks,\n    afterHooks\n  };\n}\n\nexport { changeEmail as A, sendVerificationEmail as B, verifyEmail as C, resetPassword as D, forgetPassword as E, signInEmail as F, signOut as G, HIDE_METADATA as H, callbackOAuth as I, signInSocial as J, sendVerificationEmailFn as K, originCheckMiddleware as a, ok as b, createEmailVerificationToken as c, decryptOAuthToken as d, error as e, accountInfo as f, generateState as g, handleOAuthUserInfo as h, getAccessToken as i, unlinkAccount as j, deleteUserCallback as k, listUserAccounts as l, linkSocialAccount as m, requestPasswordResetCallback as n, originCheck as o, parseState as p, requestPasswordReset as q, refreshToken as r, setTokenUtil as s, toAuthEndpoints as t, updateUser as u, forgetPasswordCallback as v, wildcardMatch as w, deleteUser as x, setPassword as y, changePassword as z };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}